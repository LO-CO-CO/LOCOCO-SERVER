name: lokoko-dev CI/CD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      # 도커 이미지 생성 후 이미지 push
      - name: Docker build & push to dev
        run: |
          docker login -u ${{ secrets.DOCKER_USER_NAME }} -p ${{ secrets.DOCKER_USER_TOKEN }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USER_NAME }}/lokoko  .
          docker push ${{ secrets.DOCKER_USER_NAME }}/lokoko

  deploy:
    runs-on: ubuntu-latest
    needs: build
    #    if: github.event_name == 'push' <= 테스트 완료 후 주석 해제
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SECRET_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SECRET_PEM }}
          envs: GITHUB_SHA
          script: |
            sudo docker pull ${{ secrets.DOCKER_USER_NAME }}/lokoko:latest
            
            ACTIVE_PORT=8080
            STANDBY_PORT=8081
            
            if sudo docker ps | grep ":8080"; then
            ACTIVE_PORT=8080
            STANDBY_PORT=8081
            else
            ACTIVE_PORT=8081
            STANDBY_PORT=8080
            fi
            
            sudo docker run \
              --network lokoko-net \
              --name lokoko-${STANDBY_PORT} \
              -d -p ${STANDBY_PORT}:8080 \
              --env-file ./lokoko-dev.env \
              -e TZ=Asia/Seoul \
              ${{ secrets.DOCKER_USER_NAME }}/lokoko:latest
            
            sleep 30
            for i in {1..5}; do
              curl -sf "http://localhost:${STANDBY_PORT}/health-check" && HEALTHY=true && break || HEALTHY=false
              echo "** Health-Check 실패, 재시도 중... (${i}/10)"
              sleep 5
            done
            if [ "$HEALTH" != "200" ]; then
            echo "헬스체크 실패, 컨테이너를 중지 후 롤백"
            sudo docker stop lokoko-${STANDBY_PORT}
            sudo docker rm lokoko-${STANDBY_PORT}
            exit 1
            fi
            
            echo "{
                admin 0.0.0.0:2020
            }
              https://52.79.208.129.nip.io {
              reverse_proxy localhost:${STANDBY_PORT}
            }" | sudo tee /etc/caddy/Caddyfile
            
            sudo docker stop lokoko-${ACTIVE_PORT}
            sudo docker rm lokoko-${ACTIVE_PORT}
            
            sudo docker image prune -a -f